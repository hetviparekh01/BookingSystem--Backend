1. Route
Attributes:
route_id (Unique identifier)
distance (Total distance of the route in kilometers)

2. Station
Attributes:
station_id (Unique identifier for the station)
name (Name of the station)

3. RouteStation
Attributes:
route_station_id (Unique identifier for the route-station relationship)
route (Foreign key reference to Route)
station (Foreign key reference to Station)
distance_from_previous_km (Distance from the previous station in kilometers)
time_from_previous_min (Time taken from the previous station in minutes)


4. Bus
Attributes:
bus_id (Unique identifier for the bus)
bus_number (Unique identifier for the bus)
seating_capacity (Total number of seats available in the bus)
amenities (Details about amenities available on the bus, e.g., Wi-Fi, AC)
route (Foreign key reference to Route)

5. BusSchedule
Attributes:
schedule_id (Unique identifier for the schedule)
bus (Foreign key reference to Bus)
route (Foreign key reference to Route)
departure_time (Time when the bus departs from the starting station)

6. Fare
Attributes:
fare_id (Unique identifier for the fare)
route (Foreign key reference to Route)
base_fare_per_km (Base fare per kilometer set by admin)
tax_percentage (Government tax percentage applicable)

7. Booking
Attributes:
booking_id (Unique identifier for the booking)
bus_schedule (Foreign key reference to BusSchedule)
user (Reference to the user who made the booking)
booking_date (Date when the booking was made)
seat_number (Number of the booked seat)

8. User
Attributes:
user_id (Unique identifier for the user)
name (Name of the user)
gender (Gender of the user)
email (Email address of the user)
phone_number (Phone number of the user)

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const routeStationSchema = new Schema({
    route: { type: Schema.Types.ObjectId, ref: 'Route', required: true },
    station: { type: Schema.Types.ObjectId, ref: 'Station', required: true },
    distance_from_previous_km: { type: Number, required: true }, // Distance from previous station in kilometers
    time_from_previous_min: { type: Number, required: true } // Time from previous station in minutes
});

const RouteStation = mongoose.model('RouteStation', routeStationSchema);

module.exports = RouteStation;



const routeSchema = new Schema({
    route_id: { type: String, unique: true, required: true },
    distance: { type: Number, required: true }, // Total distance of the route in kilometers
    stations: [{ type: Schema.Types.ObjectId, ref: 'Station' }], // Array of station references
    segments: [{
        from_station: { type: Schema.Types.ObjectId, ref: 'Station', required: true },
        to_station: { type: Schema.Types.ObjectId, ref: 'Station', required: true },
        distance_km: { type: Number, required: true }, // Distance between stations in kilometers
        time_min: { type: Number, required: true } // Time between stations in minutes
    }]
});

const busScheduleSchema = new Schema({
   


[
{
    $lookup: {
      from: "busschedules",
      localField: "_id",
      foreignField: "bus",
      as: "scheduleData"
    }
  },
  {
    $lookup: {
      from: "routes",
      localField: "route",
      foreignField: "_id",
      as: "routeDetail"
    }
  },
  {
    $unwind: {
      path: "$routeDetail",
    }
  },
  {
    $match: { _id: new ObjectId('669cb883cb92bae3e5cfa8cb') }
  },
  {
    $unwind: { path: "$routeDetail.stops" }
  },
  {
    $lookup: {
      from: "stations",
      localField: "routeDetail.stops.fromStation",
      foreignField: "_id",
      as: "fromStationDetails"
    }
  },
  {
    $unwind: { path: "$fromStationDetails" }
  },
  {
    $lookup: {
      from: "stations",
      localField: "routeDetail.stops.toStation",
      foreignField: "_id",
      as: "toStationDetails"
    }
  },
  {
    $unwind: { path: "$toStationDetails" }
  },
  {
    $match: {
      "fromStationDetails.name": "Ankleshwar", // Replace with the name of the from station
      "toStationDetails.name": "Surat"      // Replace with the name of the to station
    }
  },
  {
    $group: {
      _id: "$_id",
      busNumber: { $first: "$busNumber" },
      seatingCapacity: { $first: "$seatingCapacity" },
      amenities: { $first: "$amenities" },
      route: { $first: "$route" },
      availableSeats: { $first: "$availableSeats" },
      bookedSeats: { $first: "$bookedSeats" },
      routeDetail: {
        $push: {
          stop: "$routeDetail.stops._id",
          fromStation: "$fromStationDetails.name",
          toStation: "$toStationDetails.name",
          distancekm: "$routeDetail.stops.distancekm",
          timeMin: "$routeDetail.stops.timeMin"
        }
      },
      createdAt: { $first: "$createdAt" },
      updatedAt: { $first: "$updatedAt" }
    }
  },
  {
    $project: {
      _id: 1,
      busNumber: 1,
      seatingCapacity: 1,
      amenities: 1,
      route: 1,
      availableSeats: 1,
      bookedSeats: 1,
      routeDetail: 1,
      createdAt: 1,
      updatedAt: 1
    }
  }
]